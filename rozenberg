import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.checkbox import CheckBox
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.core.window import Window
from kivy.config import Config

Config.set('kivy','window_icon','path/to/icon.ico')

Window.size = (1080, 1920)
Window.clearcolor = (.105, .105, .105, 1)

kivy.require('1.10.0')

class MyApp(App):
    def build(self):
        self.icon = 'myicon.png'

class RosenbergTestApp(App):
    def build(self):
        self.answers = []
        self.root = BoxLayout(orientation='vertical', padding=10, spacing=10)

        questions = [
            "1. Я чувствую, что я человек достойный, по крайней мере, наравне с другими.",
            "2. Я чувствую, что у меня есть множество положительных качеств.",
            "3. Всё еще я склонен считать себя неудачником.",
            "4. Я способен сделать многое не хуже других.",
            "5. Я чувствую, что мне нечем особенно гордиться.",
            "6. В целом, я отношусь к себе положительно.",
            "7. В общем, я доволен собой.",
            "8. Я ощущаю, что я бесполезный человек.",
            "9. Я бы хотел больше уважать себя.",
            "10. Иногда я чувствую себя совершенно никчёмным."
        ]

        options = [
            "Совершенно согласен",
            "Скорее согласен",
            "Скорее не согласен",
            "Совершенно не согласен"
        ]

        scrollview = ScrollView()
        layout = BoxLayout(orientation='vertical', size_hint_y=None)
        layout.bind(minimum_height=layout.setter('height'))

        for idx, question in enumerate(questions):
            q_label = Label(text=question, size_hint_y=None, height=40, halign='left', valign='middle')
            q_label.bind(size=q_label.setter('text_size'))
            layout.add_widget(q_label)

            answer = []
            for opt_idx, option in enumerate(options):
                row = BoxLayout(orientation='horizontal', size_hint_y=None, height=30)
                cbox = CheckBox(group=f'question{idx}')
                cbox.bind(active=self.on_checkbox_active)
                row.add_widget(cbox)
                row.add_widget(Label(text=option, size_hint_y=None, height=30))
                layout.add_widget(row)
                answer.append(cbox)
            self.answers.append(answer)

        scrollview.add_widget(layout)
        self.root.add_widget(scrollview)

        submit_button = Button(text="Завершить тест", size_hint_y=None, height=50)
        submit_button.bind(on_press=self.finish_test)
        self.root.add_widget(submit_button)

        return self.root

    def on_checkbox_active(self, checkbox, value):
        pass

    def finish_test(self, instance):
        score = 0
        for i, answer_group in enumerate(self.answers):
            selected = next((cb for cb in answer_group if cb.active), None)
            if selected:
                answer_index = answer_group.index(selected)
                if i in [0, 1, 3, 6]:  # Прямые вопросы
                    score += 4 - answer_index
                else:  # Обратные вопросы
                    score += answer_index + 1

        if score < 25:
            result_message = "Самооценка низкая"
        elif 26 <= score < 30:
            result_message = "Самооценка средняя"
        elif score > 30:
            result_message = "Самооценка высокая"
        else:
            result_message = "Ошибка теста, попробуйте ещё раз. Возможно вы не ответили на все вопросы теста"

        popup = Popup(title='Результаты',
                      content=Label(text=result_message),
                      size_hint=(None, None), size=(400, 200))
        popup.open()

if __name__ == '__main__':
    RosenbergTestApp().run()
